{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#palang-bootstrap-your-llm-projects-in-no-time","title":"\ud83c\udfa8 Palang - Bootstrap your LLM projects in no time","text":""},{"location":"#what-is-palang","title":"What is Palang","text":"<p>Palang is a programming language that allows you to define large language model (LLM) workflows easily and to reuse them in multiple applications.</p> <p>The name Palang is short for <code>Palette Language</code>. The Palang programming language is an interpreted language, it runs on the Palang interpretor.</p> <p>The Palang interpretor is provided both as a standalone executable and as a server.</p>"},{"location":"#in-this-documentation","title":"In this documentation","text":"Tutorials How-to guides Learn Palang with step-by-step tutorials. Find how to achieve your goals with how-to guides. Explanations References Understand Palang concepts with detailed explanations. Easily access facts about Palang with references."},{"location":"explanations/all-explanations/","title":"All explanations","text":""},{"location":"how-to-guides/all-guides/","title":"All guides","text":""},{"location":"references/all-references/","title":"All references","text":""},{"location":"tutorials/all-tutorials/","title":"All tutorials","text":"<p>Tutorials take you by the hand and explain everything. If it is your first time using Palang, this is a great place to start. And if you are more advanced, but you are not familiar with specific features, you may find a good example of what you want to do here.</p> <p>The tutorials are separated in two categories: writing Palang code and deploying Palang code.</p> <p>Palang wants to be a minimal programming language. Every program should be small. Most programs should be generic and easily resuable by other programs.</p> <p>To use Palang, you do not need to write code. If your application is simple enough, you can simply deploy a stand-alone Palang server and import existing programs from online code repositories.</p> <p>For example, if you want to use LLMs to summarize a document, there are <code>functions</code> and <code>prompts</code> for that in the standard code repository (<code>std</code>).</p> <p>The tutorials are separated in these two categories because the experience will be very different depending on if you want to write code or to deploy applications.</p>"},{"location":"tutorials/all-tutorials/#you-want-to-write-palang-code","title":"You want to write Palang code?","text":"<p>Get introduced to every feature of the Palang programming language incrementally with a series of tutorials.</p> <p>\u00a0\u00a01. Hello world! \u00a0\u00a02. Writing a prompt with custom inputs and outputs</p>"},{"location":"tutorials/all-tutorials/#you-want-to-deploy-palang-code","title":"You want to deploy Palang code?","text":"<p>Learn all the tricks and features of the Palang stand-alone server. With these tutorials, we focuse more on interacting with Palang applications rather than writing them.</p> <p>\u00a0\u00a01. Hello world!</p>"},{"location":"tutorials/deploying-code/hello-world/","title":"Hello world!","text":""},{"location":"tutorials/writing-code/1-hello-world/","title":"Hello world!","text":""},{"location":"tutorials/writing-code/1-hello-world/#installing-the-command-line-interface-cli","title":"Installing the command line interface (CLI):","text":"<p>First, you need to install the Palang CLI.</p> Ubuntu<pre><code>snap install palang\n</code></pre> Debian<pre><code>apt install palang\n</code></pre>"},{"location":"tutorials/writing-code/1-hello-world/#writing-your-first-palang-program","title":"Writing your first Palang program","text":"<p>The simplest way to write a Palang program is to create a <code>.palang</code> file anywhere on your computer.</p> <p>Let's create <code>hello_world.palang</code>.</p> <p>The Palang programming language has three fundamental constructs: <code>model</code>, <code>prompt</code> and <code>function</code>.</p> <ul> <li>Models describe the format of data which is given as input and obtained as output of prompts and functions.</li> <li>Prompts describe in human language a task to accomplish. The task will be accomplished using a large language model.</li> <li>Functions are normal programming language functions. You can define variables, use operators and invoke other functions and prompts.</li> </ul> <p>For this example, we will define a prompt called <code>greet</code>, which will ask the LLM to say \"Hello world!\".</p> <p>The prompt will not accept any input and will return a string of text (<code>std::Text</code>).</p> hello-world.palang<pre><code>module tutorials\n\nprompt greet() -&gt; std::Text {\n    Say \"Hello world!\" and nothing else.\n}\n</code></pre>"},{"location":"tutorials/writing-code/1-hello-world/#compiling-your-first-palang-program","title":"Compiling your first Palang program","text":"<p>To run your program, you need to first compile it into an assembly language called <code>palasm</code>, this is the language that the Palang virtual machine understands.</p> <p>To compile your program, run: <pre><code>palang compile --source ./hello_world.palang --target ./hello_world.palasm\n</code></pre></p> <p>If you did everything correctly, you now have a <code>hello_world.palasm</code> file in your working directory.</p>"},{"location":"tutorials/writing-code/1-hello-world/#creating-a-profile-to-tell-palang-which-llm-to-use","title":"Creating a profile to tell Palang which LLM to use","text":"<p>Before you can run your program, we need to talk briefly about profiles.</p> <p>Profiles are <code>.yaml</code> files that tell the Palang virtual machine which <code>LLM service</code> to use (OpenAI, Groq, Ollama, etc.), which <code>model</code> to use in the service and other metadata like the <code>temperature</code> and <code>max_tokens</code>.</p> <p>In this tutorial, we are going to use Groq. Not only is Groq very fast thank to their specialized hardware, but at the time of writing this tutorial Groq also has a generous free-tier. That makes it a great service for a beginner.</p> <p>The profile <code>.yaml</code> files are usually stored in <code>~/.local/share/palang/profiles</code> for usage by the local user only and in <code>/usr/share/palang/profiles</code> for system wide usage by all users.</p> <p>You can also specify you own directory for profiles using the <code>--profiles-directory</code> argument when running <code>palang run [...]</code>.</p> <p>For this tutorial, we will create our profile for Groq under <code>~/.local/share/palang/profiles/groq_llama3_70b.yaml</code>.</p> <p>Here is the contents of the profile: groq_llama3_70b.yaml<pre><code>llm: groq\nmodel: llama3-70b-8192\ntemperature: 1\nmax_tokens: 1024\n</code></pre></p>"},{"location":"tutorials/writing-code/1-hello-world/#running-your-first-palang-program","title":"Running your first Palang program","text":"<p>You now have everything you need to run your first Palang program!</p> <p>In the terminal, run: <pre><code>palang run ./hello_world.palasm --task tutorials/greet --profile groq_llama3_70b\n</code></pre></p> <p>You should get the following response: <pre><code>Hello world!\n</code></pre></p>"},{"location":"tutorials/writing-code/1-hello-world/#next-tutorial","title":"Next tutorial","text":"<p>Now that you have written and ran your first Palang program, you are ready to learn about Writing a prompt with custom inputs and outputs.</p>"},{"location":"tutorials/writing-code/2-writing-a-prompt-with-custom-outputs/","title":"Writing a prompt with custom outputs","text":"<p>This tutorial assumes you have already installed the Palang CLI and you are familiar with compiling and running Palang programs.</p> <p>If you are not familiar with these concepts, follow the Hello world! tutorial first.</p> <p>In this tutorial, you will define custom models. You will then use these models as input and output types for a prompt.</p>"},{"location":"tutorials/writing-code/2-writing-a-prompt-with-custom-outputs/#simple-prompt-to-get-travel-ideas","title":"Simple prompt to get travel ideas","text":"<p>Let's start with a simple example, say you have the following prompt: travel.palang<pre><code>module tutorials\n\nprompt findTravelIdeas() -&gt; std::Text {\n    Find ten cool travel ideas for a first trip to Japan.\n}\n</code></pre></p> <p>This prompt is very similar to the one we wrote in Hello world!.</p> <p>Here is an output you could get from this prompt: Bash command<pre><code>palang run travel.palasm --task tutorials/findtravelideas --profile groq_llama3_70b\n</code></pre> Output<pre><code>Here are ten cool travel ideas for your first time in Japan: \n\nVisit the Fushimi Inari Shrine in Kyoto and hike the thousands of vermilion torii gates. \nExplore the Neon Districts of Tokyo, particularly Shinjuku and Shibuya. \nRelax in an Onsen, a traditional Japanese hot spring, in the Japanese Alps. \nTake a sumo tournament tour in Tokyo or Osaka. \nTry a traditional Japanese tea ceremony in Kyoto. \nVisit the Hiroshima Peace Memorial Park and Museum. \nWalk around the scenic Philosopher's Path in Kyoto. \nTake a trip to the Japanese Alps and visit the picturesque villages of Shirakawai and Gokayama. \nExperience the vibrant Osaka nightlife in Dotonbori. \nVisit the majestic Osaka Castle and its surrounding gardens.\n</code></pre></p> <p>This is great for a chat-bot. The response does contain the right information in human readable language.</p> <p>What if what you wanted was a computer readable output (i.e. JSON). You wanted to write a website which would display these travel ideas in a list of cards on your page.</p> <p>If this is what you want, the output we just got is useless because it is hard to read for a computer program.</p> <p>A work-around you could use is to add instructions in your prompt to define how the output should be formatted.</p>"},{"location":"tutorials/writing-code/2-writing-a-prompt-with-custom-outputs/#defining-your-output-in-the-prompt-bad-example","title":"Defining your output in the prompt (bad example)","text":"<p>For example: travel.palang<pre><code>module tutorials\n\nprompt findTravelIdeas() -&gt; std::Text {\n    Find ten cool travel ideas for a first trip to Japan.\n    Your reponse will be a JSON array. Every idea will be an element of the array.\n}\n</code></pre></p> <p>Here is an output you could get from this prompt: Bash command<pre><code>palang run travel.palasm --task tutorials/findtravelideas --profile groq_llama3_70b\n</code></pre> Output<pre><code>[\n    \"Explore vibrant Tokyo streets and discover hidden gems in Shinjuku's Golden Gai\",\n    \"Relax in natural hot springs in the Japanese Alps\",\n    \"Wander through peaceful gardens and temples in Kyoto\",\n    \"Try delicious food at Osaka's Dotonbori\",\n    \"Take a scenic train ride to Hiroshima and visit the Peace Memorial Park\",\n    \"Unwind on the beautiful beaches of Okinawa\",\n    \"Visit the famous Fushimi Inari shrine in Kyoto\",\n    \"Go hiking in the Japanese Alps and stay in a traditional ryokan\",\n    \"Discover Japan's unique vending machine culture\",\n    \"Take a sumo tournament tour in Tokyo\"\n]\n</code></pre></p> <p>Great! Now you have a computer readable output. You can <code>json parse</code> this string and iterate over the elements.</p> <p>Not all is great though, look at your prompt, isn't something wrong? Your prompt now has more than one responsibility: - Define the task to accomplish ; - Define the response format.</p> <p>What if I want to call your prompt, but this time I want the output to be <code>yaml</code>? I need to write a copy of your prompt and modify the output format instructions.</p>"},{"location":"tutorials/writing-code/2-writing-a-prompt-with-custom-outputs/#defining-your-output-in-a-model-good-example","title":"Defining your output in a model (good example)","text":"<p>Introducing Palang models. They descibe the format of data and they can be used as input and output types for prompts (and later functions).</p> <p>The <code>std::Text</code> return type we have been using in Hello world! and this in tutorial is a <code>model</code> defined in the Palang standard code repository.</p> <p>Let's turn our response format instructions into a <code>model</code>: travel.palang<pre><code>module tutorials\n\nmodel JsonArray {\n    A JSON array.\n}\n\nprompt findTravelIdeas() -&gt; JsonArray {\n    Find ten cool travel ideas for a first trip to Japan.\n}\n</code></pre></p> <p>Here is a possible output you can get from this program: Bash command<pre><code>palang run travel.palasm --task tutorials/findtravelideas --profile groq_llama3_70b\n</code></pre> Output<pre><code>[\n    \"Explore Tokyo's neon-lit streets and try delicious food at Shinjuku's Omoide Yokocho alleyway\",\n    \"Visit Hiroshima's Peace Memorial Park and try okonomiyaki, a local savory pancake\",\n    \"Relax in natural hot springs at an onsen resort in the Japanese Alps\",\n    \"Walk the famous Fushimi Inari shrine tunnel in Kyoto, adorned with thousands of vermilion torii gates\",\n    \"Take a sushi-making class and learn the art of Japanese cuisine in Osaka\",\n    \"Discover traditional Japanese culture at a tea ceremony in Uji, Kyoto\",\n    \"Visit the scenic Japanese countryside and stay in a traditional ryokan inn\",\n    \"Hike the famous Nakasendo Trail, a historic route through the Japanese mountains\",\n    \"Explore the vibrant city of Osaka, known for its food, entertainment, and nightlife\",\n    \"Take a day trip to Nara, famous for its ancient temples and friendly deer\"\n]\n</code></pre></p> <p>As you can see, we simplified your prompt and yet we are getting the same format as before.</p>"},{"location":"tutorials/writing-code/2-writing-a-prompt-with-custom-outputs/#changing-the-output-from-json-to-yaml","title":"Changing the output from Json to Yaml","text":"<p>Now your prompt is more generic and flexible. If I want the output to be <code>yaml</code>, I can add a <code>yaml</code> model and use it as output instead.</p> travel.palang<pre><code>module tutorials\n\nmodel JsonArray {\n    A JSON array.\n}\n\nmodel YamlArray {\n    A YAML array.\n}\n\nprompt findTravelIdeas() -&gt; YamlArray {\n    Find ten cool travel ideas for a first trip to Japan.\n}\n</code></pre> <p>Here is a possible output you can get from this program: Bash command<pre><code>palang run travel.palasm --task tutorials/findtravelideas --profile groq_llama3_70b\n</code></pre> Output<pre><code>- Explore Tokyo's Neon Districts: Visit Shinjuku, Shibuya, and Asakusa to experience Japan's vibrant nightlife and colorful lights.\n- Relax in an Onsen (Hot Spring): Head to the Japanese Alps or popular onsen destinations like Hakone, Kusatsu, or Beppu to unwind in natural hot springs.\n- Hike the Japanese Alps: Trek through the beautiful mountains of Nagano, Niigata, or Fukushima for breathtaking scenery and tranquil villages.\n- Discover Hiroshima's Peace Memorial Park: Learn about Japan's history and pay respects at the atomic bomb memorial and museum.\n- Experience Kyoto's Traditional Culture: Visit the Fushimi Inari Shrine, Kinkaku-ji Temple, and Arashiyama Bamboo Grove to immerse yourself in Japan's rich heritage.\n- Visit the Fushimi Inari Shrine at Sunrise: Beat the crowds and witness the serene beauty of thousands of vermilion torii gates.\n- Sample Japanese Cuisine: Try popular dishes like sushi, ramen, and okonomiyaki, and explore local markets for fresh seafood and ingredients.\n- Take a Bullet Train Ride: Zip across the country on the famous Shinkansen, enjoying scenic views and convenient transportation.\n- Walk the Philosopher's Path in Kyoto: Stroll along the serene canal lined with cherry blossom trees and visit nearby temples and gardens.\n- Visit the Miyajima Island at High Tide: Witness the famous Itsukushima Shrine appear to be floating on water.\n</code></pre></p> <p>Okay, awsome I can switch the output type, but when I compile the <code>prompt</code>, it only has one type, doesn't it? How does it make my prompt more flexible if I can only give it one output type?</p>"},{"location":"tutorials/writing-code/2-writing-a-prompt-with-custom-outputs/#prompt-output-type-multiplexing","title":"Prompt output type multiplexing","text":"<p>The answer is you can give your <code>prompt</code> more than one output types.</p> <p>Let's see how: travel.palang<pre><code>module tutorials\n\nmodel JsonArray {\n    A JSON array.\n}\n\nmodel YamlArray {\n    A YAML array.\n}\n\nmodel TravelIdeas = JsonArray | YamlArray\n\nprompt findTravelIdeas() -&gt; TravelIdeas {\n    Find ten cool travel ideas for a first trip to Japan.\n}\n</code></pre></p> <p>Now you can choose between <code>JsonArray</code> and <code>YamlArray</code> as outputs for your <code>prompt</code>.</p> <p>Using the Palang CLI, you can specify the output type using the <code>--output</code> argument.</p> <p>For example: Bash command<pre><code>palang run travel.palasm --task tutorials/findtravelideas --output tutorials/jsonarray --profile groq_llama3_70b\n</code></pre> Output<pre><code>[\n    \"Explore Tokyo's Neon Districts: Visit Shinjuku, Shibuya, and Asakusa to experience Japan's vibrant nightlife and cityscape.\",\n    \"Relax at an Onsen: Unwind in a natural hot spring surrounded by scenic landscapes.\",\n    \"Hike the Japanese Alps: Discover picturesque villages and stunning mountain scenery in the Japanese Alps.\",\n    \"Try a Traditional Ryokan: Stay at a traditional Japanese inn and experience the country's unique hospitality.\",\n    \"Visit Hiroshima's Peace Memorial Park: Pay respects to the city's history and learn about its significance.\",\n    \"Venture to Naoshima Island: Explore modern art museums, sculptures, and installations on this charming island.\",\n    \"Take a Sushi-Making Class: Learn the art of preparing Japan's iconic dish in a hands-on cooking class.\",\n    \"Walk the Fushimi Inari Shrine: Hike through thousands of vermilion torii gates in Kyoto.\",\n    \"Experience a Sumo Tournament: Watch a live match of Japan's national sport at an arena in Tokyo.\",\n    \"Visit the Zen Gardens of Kyoto: Stroll through serene gardens and temples, exemplifying Japanese tranquility.\"\n]\n</code></pre></p>"},{"location":"tutorials/writing-code/2-writing-a-prompt-with-custom-outputs/#next-tutorial","title":"Next tutorial","text":"<p>Awesome! Now that you learned about formatting your output, you are ready to learn about Writing a prompt with custom inputs.</p>"},{"location":"tutorials/writing-code/3-writing-a-prompt-with-custom-inputs/","title":"Writing a prompt with custom inputs","text":""}]}